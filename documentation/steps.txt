PREPROCESSOR SOLUTION A.

preprocess
{
	add parser ... X
	add macro ... Y
	add compiler ... Z

}

X is not available
Y is available
Z is available


+ easy to implement
- no single file syntax definition

PREPROCESSOR SOLUTION B. <--------------------------------

preprocess
{
	add parser ... X
	add macro ... Y
	add compiler ... Z
}


X is available
Y is available
Z is available

+ single file syntax defintion
- harder to implement
- hard to hook the preprocessor { ... } syntax
	=> one answer may be to provide a hookable (*function)(ast_list*) to perform the preprocessing

=======================================

INCLUDE SOLUTION A.

preprocess
{
	add parser ... X
	add macro ... Y
	add compiler ... Z
	#include "new_source" // X, Y and Z are not available in new_source, new_source beeing part of the preprocessor
}

#include "new_source" // X, Y and Z are available in new_source

+ more readable
- more confusion about if source contains macros or not
- need to implement CPP

INCLUDE SOLUTION B.  <--------------------------------- (then only #include when CPP will be implemented in cedilla)

preprocess
{
	add parser ... X
	add macro ... Y
	add compiler ... Z


	#include "new_source" // X, Y and Z are nn new_soot available in new_source, new_source beeing part of the preprocessor
	@include "new_source" // X, Y and Z are not available iurce, new_source beeing also parsed using cedilla new_source beeing part of the preprocessor
}

@include "new_source" //X, Y and Z are available in new_source
#include "new_source" // X, Y and Z are not available in new_source, (or may if gcc -E)

+ less confusion about if source contains macros or not
+ no need to implement CPP (maybe not if gcc -E is ran before... but harder to read if 2 preprocessors)
- less readable

INCLUDE SOLUTION C.

- first : gcc -E is ran before cedilla, but if ran before, how would #line be emit ? ORR run cedilla first, then CPP .... but no check of the included stmt
- secondly, in the future, CPP would be part of cedilla

preprocess
{
	add parser ... X
	add macro ... Y
	add compiler ... Z


	#include "new_source" // X, Y and Z are not available in new_source, new_source beeing part of the preprocessor
}

#include "new_source" // X, Y and Z are available in new_source

+ less confusion about if source contains macros or not
+ no need to implement CPP (maybe not if gcc -E is ran before... but harder to read if 2 preprocessors)
- less readable

-----------------------------------

1) pa parser(const char *, ast) +  ast macro(ast) + char *compiler(ast) <------------
	+ more efficient
	- less easy ??
	- macro would require user-level tree dissection ???


or

2) only pa parser(const char *, ast) + char*compiler(ast)

	+ easier for mind ???
	- less efficient


